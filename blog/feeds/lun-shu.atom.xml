<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Pyslvs.com - 論述</title><link href="https://pyslvs.github.io/blog/" rel="alternate"></link><link href="https://pyslvs.github.io/blog/feeds/lun-shu.atom.xml" rel="self"></link><id>https://pyslvs.github.io/blog/</id><updated>2018-04-17T21:00:00+08:00</updated><entry><title>Triangular formulas in Pyslvs</title><link href="https://pyslvs.github.io/blog/pyslvs_triangle_expression.html" rel="alternate"></link><published>2018-04-17T21:00:00+08:00</published><updated>2018-04-17T21:00:00+08:00</updated><author><name>Yuan Chang</name></author><id>tag:pyslvs.github.io,2018-04-17:/blog/pyslvs_triangle_expression.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;Triangular formula expression in Pyslvs&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Source code written in Python&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pyslvs 中的三角形表示式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Python 版本的原始碼&lt;/li&gt;
&lt;/ul&gt;
</summary><content type="html">&lt;ul&gt;
&lt;li&gt;Triangular formula expression in Pyslvs&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Source code written in Python&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pyslvs 中的三角形表示式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Python 版本的原始碼&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Triangular formulas in Pyslvs&lt;/h1&gt;
&lt;p&gt;In order to reach the simulation of mechanism motion path, Pyslvs takes three geometric solutions to meets the joint types in PMKS.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PLA(P): Input as two (or one) known point(s), distance of reference point to the target point, and an angle value of them (or horizontal line), we can find the coordinate of target point.&lt;/li&gt;
&lt;li&gt;PLLP: Input as two known points, two distances of two reference points to the target point, we can find the coordinate of target point.&lt;/li&gt;
&lt;li&gt;PLPP: Input as a known point, distance of reference point to the target point, a straight line between two known points, we can find the coordinate of target point that is on the line.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;為了達成機構路徑的模擬，以符合 PMKS 所能模擬的接頭種類，Pyslvs 採用三種幾何解法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PLA(P)：透過兩個（或一個）已知點、基準點至目標點距離，及其（與水平線）的夾角，可以求得目標點座標。&lt;/li&gt;
&lt;li&gt;PLLP：透過兩個已知點、兩基準點至目標點距離，可以求得目標點座標。&lt;/li&gt;
&lt;li&gt;PLPP：透過一個已知點、基準點至目標點距離、已知兩點連成的直線，可以求得目標點在直線上的座標。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;PLAP&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/coursemdetw/project_site_files/gh-pages/files/pyslvs/PLAP.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PLLP&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/coursemdetw/project_site_files/gh-pages/files/pyslvs/PLLP.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PLPP&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/coursemdetw/project_site_files/gh-pages/files/pyslvs/PLPP.png"&gt;&lt;/p&gt;
&lt;h2&gt;Expression&lt;/h2&gt;
&lt;p&gt;Pyslvs is using the expression to solving coordinates as below:&lt;/p&gt;
&lt;p&gt;Pyslvs 使用函式解題的表示法如下：&lt;/p&gt;
&lt;pre style="overflow-x:scroll"&gt;
Function[parameter0, parameter1, parameter2, ...](Target); ...
&lt;/pre&gt;

&lt;p&gt;After determined the target point by arguments, it can be use as a parameter to calculate next formula.&lt;/p&gt;
&lt;p&gt;For example, the coordinates of a four bar linkage mechanism can be find out with three formulas:&lt;/p&gt;
&lt;p&gt;當透過輸入端求解之後，可以透過解出的目標點繼續求解。&lt;/p&gt;
&lt;p&gt;例如，一個四連桿機構可以透過三個函式求解：&lt;/p&gt;
&lt;pre style="overflow-x:scroll"&gt;
#Known: a0, P0, P2, L0, L1, L2, L3, L4
PLAP[P0, L0, a0](P1); PLLP[P1, L1, L2, P2](P3); PLLP[P1, L3, L4, P3](P4)
&lt;/pre&gt;

&lt;h2&gt;Source code&lt;/h2&gt;
&lt;p&gt;There has input and output types of Cython function, and the calculation method as Python version.&lt;/p&gt;
&lt;p&gt;這裡提供 Cython 的輸入輸出類型與 Python 版本的運算方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PLAP&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="brush: c"&gt;
tuple PLAP(Coordinate A, double L0, double a0, Coordinate B=0, bool inverse=false);
&lt;/pre&gt;

&lt;pre class="brush: python"&gt;
def PLAP(A, L0, a0, B=None, inverse=False):
    """Point on circle by angle."""
    a1 = atan2(B.y - A.y, B.x - A.x) if B else 0
    if inverse:
        return (A.x + L0*cos(a1 - a0), A.y + L0*sin(a1 - a0))
    else:
        return (A.x + L0*cos(a1 + a0), A.y + L0*sin(a1 + a0))
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;PLLP&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="brush: c"&gt;
tuple PLLP(Coordinate A, double L0, double L1, Coordinate B, bool inverse=false);
&lt;/pre&gt;

&lt;pre class="brush: python"&gt;
def PLLP(A, L0, L1, B, inverse=False):
    """Two intersection points of two circles."""
    dx = B.x - A.x
    dy = B.y - A.y
    d = A.distance(B)

    #No solutions, the circles are separate.
    if d &gt; L0 + L1:
        return (nan, nan)

    #No solutions because one circle is contained within the other.
    if d &lt; abs(L0 - L1):
        return (nan, nan)

    #Circles are coincident and there are an infinite number of solutions.
    if (d == 0) and (L0 == L1):
        return (nan, nan)
    a = (L0*L0 - L1*L1 + d*d)/(2*d)
    h = sqrt(L0*L0 - a*a)
    xm = A.x + a*dx/d
    ym = A.y + a*dy/d

    if inverse:
        return (xm + h*dy/d, ym - h*dx/d)
    else:
        return (xm - h*dy/d, ym + h*dx/d)
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;PLPP&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="brush: c"&gt;
tuple PLPP(Coordinate A, double L0, Coordinate B, Coordinate C, bool inverse=false);
&lt;/pre&gt;

&lt;pre class="brush: python"&gt;
def PLAP(A, L0, B, C, inverse=False):
    """Two intersection points of a line and a circle."""
    line_mag = B.distance(C)
    dx = C.x - B.x
    dy = C.y - B.y
    u = ((A.x - B.x)*dx + (A.y - B.y)*dy) / (line_mag*line_mag)
    I = Coordinate(B.x + u*dx, B.y + u*dy)

    #Test distance between point A and intersection.
    d = A.distance(I)
    if d &gt; L0:
        #No intersection.
        return (nan, nan)
    elif d == L0:
        #One intersection point.
        return (I.x, I.y)

    #Two intersection points.
    d = sqrt(L0*L0 - d*d) / line_mag
    dx *= d
    dy *= d
    if inverse:
        return (I.x - dx, I.y - dy)
    else:
        return (I.x + dx, I.y + dy)
&lt;/pre&gt;</content><category term="expression"></category></entry><entry><title>設計、設計方法與機械設計</title><link href="https://pyslvs.github.io/blog/scrum_design-design_methods-and-mechanical-design.html" rel="alternate"></link><published>2017-12-02T11:00:00+08:00</published><updated>2017-12-02T11:00:00+08:00</updated><author><name>scrum</name></author><id>tag:pyslvs.github.io,2017-12-02:/blog/scrum_design-design_methods-and-mechanical-design.html</id><summary type="html">&lt;p&gt;從設計觀念的釐清, 到設計方法的探尋, 以及利用各種設計方法來進行機械設計, 到底有沒有一套脈絡或論述可以依循?&lt;/p&gt;
</summary><content type="html">&lt;p&gt;從設計觀念的釐清, 到設計方法的探尋, 以及利用各種設計方法來進行機械設計, 到底有沒有一套脈絡或論述可以依循?&lt;/p&gt;


&lt;h2&gt;設計到底是甚麼?&lt;/h2&gt;
&lt;p&gt;在工程領域, 設計應該是一種表達, 而且是能夠讓參與設計的所有團隊成員都充分了解, 且據以依循, 可以得到預期結果的具體表達.&lt;/p&gt;
&lt;p&gt;工程設計常用的表達至少有口語、文字、2D、3D、數學與實體等六種方式.&lt;/p&gt;
&lt;p&gt;例如: 利用 &lt;a href="http://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 管理 &lt;a href="https://github.com/getpelican/pelican"&gt;Pelican&lt;/a&gt; 靜態網誌系統的協同使用"設計", 文字表達敘述如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;這是一套允許多人協同編寫位於 content 目錄下的 &lt;a href="https://en.wikipedia.org/wiki/Markdown"&gt;Markdown&lt;/a&gt; 檔案格式或 &lt;a href="https://en.wikipedia.org/wiki/ReStructuredText"&gt;reStructuredText&lt;/a&gt; 格式文章原稿的系統&lt;/li&gt;
&lt;li&gt;為了完整保留本網誌系統原稿與設定檔案的歷程資料, 採用 &lt;a href="https://github.com/"&gt;Github&lt;/a&gt; 或 &lt;a href="https://www.fossil-scm.org"&gt;Fossil SCM&lt;/a&gt; 進行內容組態管理&lt;/li&gt;
&lt;li&gt;為了在組態管理歷程資料過程, 避免各學員的 &lt;a href="http://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 專案 XML 檔案, 因合併產生衝突處理上的困難, 規定各成員必須自行維護管理 users 目錄下, 以作者名稱命名的 .leo 檔案&lt;/li&gt;
&lt;li&gt;為了讓 &lt;a href="https://github.com/getpelican/pelican"&gt;Pelican&lt;/a&gt; 所產生的 html 網誌系統, 可以同時在無網路連線的近端與雲端上使用, 近端利用 &lt;a href="https://github.com/pyslvs/pyslvs.github.io/blob/master/pelicanconf.py"&gt;pelicanconf.py&lt;/a&gt; 加上 &lt;a href="https://github.com/pyslvs/pyslvs.github.io/blob/master/local_publishconf.py"&gt;local_publishconf.py&lt;/a&gt; 轉檔, 遠端則使用 &lt;a href="https://github.com/pyslvs/pyslvs.github.io/blob/master/pelicanconf.py"&gt;pelicanconf.py&lt;/a&gt; 加上 &lt;a href="https://github.com/pyslvs/pyslvs.github.io/blob/master/publishconf.py"&gt;publishconf.py&lt;/a&gt; 轉檔&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/getpelican/pelican"&gt;Pelican&lt;/a&gt; 轉換完成的 html 檔案, 設定置於 blog 目錄中&lt;/li&gt;
&lt;li&gt;由於 &lt;a href="https://github.com/getpelican/pelican"&gt;Pelican&lt;/a&gt; 轉換後的 html 位於 blog 子目錄, 因此整個系統根目錄中的 index.html 以 head 標註中的 meta redirect 跳轉至 blog 目錄中的 index.html&lt;/li&gt;
&lt;li&gt;為了讓多人所建立的文章原稿, 同時存入 content 目錄而不會產生覆蓋, 規定以作者名稱加上底線, 再加上當天日期及副檔名命名&lt;/li&gt;
&lt;li&gt;作者若同一天建立多篇文章原稿, 則以用戶名稱_日期-1.md 等 dash 後加上數字區別&lt;/li&gt;
&lt;li&gt;因為 &lt;a href="https://github.com/getpelican/pelican"&gt;Pelican&lt;/a&gt; 針對沒有 slug 欄位設定的中文標題文章原稿, 會以拉丁拼音命名轉換後的 html 檔案, 比較不容易望文生義, 因此建議各文章以有意義的英文名稱命名, 且最前方加上作者名稱, 以避免因重複 slug 設定, 而讓 &lt;a href="https://github.com/getpelican/pelican"&gt;Pelican&lt;/a&gt; 無法轉檔&lt;/li&gt;
&lt;li&gt;為了讓各用戶的 &lt;a href="http://leoeditor.com/"&gt;Leo Editor&lt;/a&gt; 文章節點中, 以 @edit 或 @clean 節點指令下的文章更容易查找, 建議在存檔節點的根節點, 以文章標題註記&lt;/li&gt;
&lt;li&gt;有關 &lt;a href="https://github.com/arulrajnet/attila"&gt;attila&lt;/a&gt; 樣板右方 menu 側欄中的連結增刪, 可以透過編輯 partials 目錄中的 navigation.html 達成&lt;/li&gt;
&lt;li&gt;頁面正中方的搜尋表達, 以修改近端與雲端 templates 目錄中的 base.html 檔案中的 search section, 套入 &lt;a href="https://github.com/pyslvs/pyslvs.github.io/blob/master/theme/attila/templates/search.html"&gt;search.html&lt;/a&gt; 達成&lt;/li&gt;
&lt;li&gt;系統啟用 &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/summary"&gt;summary plugin&lt;/a&gt; 的目的, 在於讓 &lt;a href="https://en.wikipedia.org/wiki/ReStructuredText"&gt;reStructuredText&lt;/a&gt; 格式文章原稿可以透過標註, 區隔摘要與內文&lt;/li&gt;
&lt;li&gt;系統啟用 &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/neighbors"&gt;neighbors plugin&lt;/a&gt; 的目的, 在於讓各篇文章末端出現前後文章的連結, 以方便循序瀏覽閱讀&lt;/li&gt;
&lt;li&gt;系統啟用 &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/tipue_search"&gt;tipuesearch plugin&lt;/a&gt; 的目的, 在於讓使用者可以透過兩個字元以上的關鍵字進行全文搜尋&lt;/li&gt;
&lt;li&gt;為了讓 &lt;a href="https://github.com/getpelican/pelican"&gt;Pelican&lt;/a&gt; 轉換完成的 html 檔案, 可以採 &lt;a href="http://www.tipue.com/search/"&gt;tipuesearch&lt;/a&gt; Javascript 延伸功能, 以關鍵字搜尋, 近端關鍵字以 &lt;a href="https://github.com/pyslvs/pyslvs.github.io/blob/master/blog/tipuesearch_content.js"&gt;tipuesearch_content.js&lt;/a&gt; 儲存, 遠端則使用 &lt;a href="https://github.com/pyslvs/pyslvs.github.io/blob/master/blog/tipuesearch_content.json"&gt;tipuesearch_content.json&lt;/a&gt; 儲存, 詳細內容可參見 plugin 目錄中, tipue_search 子目錄中的 &lt;a href="https://github.com/pyslvs/pyslvs.github.io/blob/master/plugin/tipue_search/tipue_search.py"&gt;tipue_search.py&lt;/a&gt; 設定&lt;/li&gt;
&lt;li&gt;上述之所以在轉檔階段需要區分近端與雲端的原因, 在於近端無 &lt;a href="https://disqus.com/"&gt;disqus&lt;/a&gt; 設定, 而遠端則附加 &lt;a href="https://disqus.com/"&gt;disqus&lt;/a&gt; 回應系統&lt;/li&gt;
&lt;li&gt;為了讓近端與遠端瀏覽器中各 &lt;a href="https://en.wikipedia.org/wiki/Ajax_(programming)"&gt;AJAX&lt;/a&gt; 前後端程式系統的反應一致, 近端利用 www-server 按鈕, 以執行緒啟動 https 伺服器, 使用者可以在轉檔完成後, 以瀏覽器 IPv4 網路協定檢查內容&lt;/li&gt;
&lt;li&gt;為了讓系統在 IPv6 網路協定下正常運作, 以 ipv6-https-server 按鈕, 以執行緒啟動 https 伺服器, 使用者可以在轉檔完成後 ,以瀏覽器 IPv6 網路協定檢查內容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;當然, 本網誌系統的完整原始資料都保存在 &lt;a href="https://github.com/pyslvs/pyslvs.github.io"&gt;Pyslvs 倉儲&lt;/a&gt;, 任何人只要 git clone 倉儲, 稍加修改, 就可以另起爐灶, 延續這個網誌系統的價值, 但是其中許多細微精密的設計, 若沒有完整表達, 一旦爾後使用環境改變或各相關系統改版, 使用者就無法充分掌握各開放系統的互動搭配, 獨力配置因應.&lt;/p&gt;
&lt;p&gt;換言之, 工程領域中與所謂設計相關的具體表達, 至少是時間與所處環境的函數, 一旦時空轉變, 就必須透過完整的歷程組態管理紀錄, 啟動各互動元件間的配置修改, 方能延續或加值原始設計的表達, 得到預期結果.&lt;/p&gt;
&lt;h2&gt;設計方法&lt;/h2&gt;
&lt;p&gt;假如我們接受在工程領域中, 上述所謂設計是一種表達的陳述, 那麼在表達設計的歷程中, 將存在許多解決問題的方法, 與所處時空背景的說明.&lt;/p&gt;
&lt;p&gt;首先, 甚麼是方法? "方"為合乎約制條件, 可以實際拿出來使用的策略與規則, 表示並非空想, 而可實際施行的內容, 才叫"方". 至於"法"是順應自然條件下, 可因時空而制宜的最高行事準則. 因此"方法"就是: 配合不同條件, 實際施行的最高準則.&lt;/p&gt;
&lt;p&gt;而再從上述設計有六種表達方式的論述出發, 那麼以口語表達而言的設計方法, 就是:&lt;/p&gt;
&lt;p&gt;配合不同條件, 實際施行口語表達的最高準則. 也就是因應環境與對象, 將設計內容, 說清楚講明白所採行的策略與準則.&lt;/p&gt;
&lt;p&gt;因此, 所謂設計方法, 除了口語表達外, 還可以從文字、2D、3D、數學與實體等表達的形式, 加以發揮, 具體呈現設計內容.&lt;/p&gt;
&lt;p&gt;由於設計方法以各種形式表達的過程中, 會因時空背景與參與人員所做決策的差異, 而產生不同的結果, 多人協同團隊為了更有效掌握過程中的各項細節, 因此設計方法及組成元件有關的組態管理系統 (Configuration Management) 因應而生.&lt;/p&gt;
&lt;h2&gt;機械設計&lt;/h2&gt;
&lt;p&gt;機械是一種器物, 而且是由固體、流體與軟體元件精巧組合而成, 可互動運作, 達成特定功能之器物. 因此機械設計就是靈活運用六種表達方式, 明確說明如何透過固體、流體與軟體元件之互動運作, 而能達成預定結果之明確與具體表達.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pyslvs.com"&gt;Pyslvs&lt;/a&gt; 是機械設計過程中的一項工具, 主要由平面機構模擬核心、演化運算核心與視窗圖形化介面程式所組成. 其中, 兩種運算核心都依據平面機構有關的數學模型與分析表達, 採用軟體元件製作, 再結合 2D 使用者圖形介面建立物件導向, 以及事件驅動程式元件等功能, 讓使用者可以輸入平面機構模型後, 進行模擬或合成運算.&lt;/p&gt;
&lt;p&gt;而 &lt;a href="http://pyslvs.com"&gt;Pyslvs&lt;/a&gt; 平面機構模擬核心的主體為一套 Geometric Constrain Solver, 依附在 Solvespace 參數化 3D 繪圖套件中. 在 2013 年 9 月透過 &lt;a href="http://www.swig.org/"&gt;SWIG&lt;/a&gt; (Simplified Wrapper and Interface Generator) 技術, 轉為 Python2 可呼叫的程式庫, 為 &lt;a href="https://github.com/BBBSnowball/python-solvespace"&gt;Python2-Solvespace&lt;/a&gt;. 2016 年 7 月之後, 經本站轉為 Python3 可呼叫的程式庫, 成為 &lt;a href="https://github.com/KmolYuan/python-solvespace"&gt;Python3-Solvespace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;至於 &lt;a href="http://pyslvs.com"&gt;Pyslvs&lt;/a&gt; 平面機構合成所使用的演化運算核心 ,則源自 2015 年 4 月利用 &lt;a href="http://cython.org/"&gt;Cython&lt;/a&gt; (C-extension for Python) 技術所開發的 &lt;a href="https://github.com/kmollee/algorithm"&gt;Algorithm&lt;/a&gt;, 包含實數編碼基因 (Real-coded Genetic) 演算法、差分進化 (Differential Evolution) 演算法與螢火蟲 (Firefly) 演算法等模組.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pyslvs.com"&gt;Pyslvs&lt;/a&gt; 的圖形介面採用 &lt;a href="https://www.riverbankcomputing.com/software/pyqt/intro"&gt;PyQt5&lt;/a&gt; , 在 &lt;a href="https://eric-ide.python-projects.org"&gt;Eric6&lt;/a&gt; 整合開發環境中建立.&lt;/p&gt;</content><category term="design"></category><category term="design method"></category><category term="mechanical design"></category></entry></feed>